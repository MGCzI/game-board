[{"/home/mgcz/game-board/client/src/index.tsx":"1","/home/mgcz/game-board/client/src/reportWebVitals.ts":"2","/home/mgcz/game-board/client/src/App.tsx":"3","/home/mgcz/game-board/client/src/registration.tsx":"4","/home/mgcz/game-board/client/src/redux/reducer.ts":"5","/home/mgcz/game-board/client/src/redux/user/slice.ts":"6","/home/mgcz/game-board/client/src/welcome.tsx":"7","/home/mgcz/game-board/client/src/login.tsx":"8"},{"size":1561,"mtime":1658948156667,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1658846205928,"results":"11","hashOfConfig":"10"},{"size":868,"mtime":1658947990077,"results":"12","hashOfConfig":"10"},{"size":3592,"mtime":1658942825157,"results":"13","hashOfConfig":"10"},{"size":231,"mtime":1658946948947,"results":"14","hashOfConfig":"10"},{"size":3268,"mtime":1658946998197,"results":"15","hashOfConfig":"10"},{"size":930,"mtime":1658947616317,"results":"16","hashOfConfig":"10"},{"size":2829,"mtime":1658947446847,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nmnsq",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"24"},"/home/mgcz/game-board/client/src/index.tsx",[],[],"/home/mgcz/game-board/client/src/reportWebVitals.ts",[],[],[],"/home/mgcz/game-board/client/src/App.tsx",["47","48","49"],["50"],"import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Link, Route } from \"react-router-dom\";\n\n// import Registration from \"./registration\";\n\nfunction App() {\n    function logOutFunction() {\n        fetch(\"/logout.json\")\n            .then((resp) => resp.json())\n            .then((data) => {\n                if (data.status === \"Success\") {\n                    // eslint-disable-next-line no-restricted-globals\n                    location.reload();\n                }\n            });\n    }\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <p>WellCome to my App</p>\n                <Link to=\"/\" onClick={logOutFunction}>\n                    Log Out\n                </Link>\n            </header>\n            <h1> Your ARE LOGIN!!!! :D</h1>\n        </div>\n    );\n}\n\nexport default App;\n","/home/mgcz/game-board/client/src/registration.tsx",["51"],[],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Registration.css\";\nimport validator from \"validator\";\n\ninterface RegistrationInputs {\n    name: string;\n    surname: string;\n    email: string;\n    password: string;\n}\n\nconst initReg: RegistrationInputs = {\n    name: \"\",\n    surname: \"\",\n    email: \"\",\n    password: \"\",\n};\n\nconst optionValidatorEmpty = { ignore_whitespace: false };\n\nexport default function Registration() {\n    const [inputsValues, setInputsValues] =\n        useState<RegistrationInputs>(initReg);\n    const [error, setError] = useState<boolean>(false);\n\n    function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        setInputsValues({\n            ...inputsValues,\n            [event.target.name]: event.target.value.trim(),\n        });\n    }\n\n    async function handleSubmit() {\n        console.log(\"Handle the submit, inputsValues:\", inputsValues);\n\n        // Lets Valid the input before sending them to the server.\n        if (\n            !validator.isEmail(inputsValues.email) ||\n            validator.isEmpty(inputsValues.name, optionValidatorEmpty) ||\n            validator.isEmpty(inputsValues.surname, optionValidatorEmpty) ||\n            validator.isEmpty(inputsValues.password, optionValidatorEmpty)\n        ) {\n            console.log(\"Error\");\n            setError(true);\n        } else {\n            console.log(\"All inputs are valid\");\n\n            try {\n                const resp = await fetch(\"/api/registration\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify(inputsValues),\n                });\n\n                const data = await resp.json();\n\n                if (data.status === \"Success\") {\n                    console.log(\"Everything is success!\");\n\n                    // location.replace(\"/\");\n                    // location.reload();\n                } else {\n                    setError(true);\n                }\n            } catch {\n                setError(true);\n            }\n        }\n    }\n\n    return (\n        <>\n            <div>registration</div>\n            <div className=\"form\">\n                <h1>Join our community</h1>\n\n                <p>\n                    Registration ||\n                    {/* <Link to=\"/login\"> Log in </Link> */}\n                </p>\n                <div className=\"error\">\n                    {error && <p>oops, something went wrong</p>}\n                </div>\n\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    placeholder=\"Name\"\n                    onChange={handleChange}\n                    required\n                ></input>\n                <input\n                    type=\"text\"\n                    name=\"surname\"\n                    placeholder=\"Surname\"\n                    onChange={handleChange}\n                    required\n                ></input>\n                <input\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"Email@email.com\"\n                    onChange={handleChange}\n                    required\n                ></input>\n                <input\n                    type=\"password\"\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    onChange={handleChange}\n                    required\n                ></input>\n                <button onClick={handleSubmit}>Submit</button>\n            </div>\n        </>\n    );\n}\n","/home/mgcz/game-board/client/src/redux/reducer.ts",[],[],"/home/mgcz/game-board/client/src/redux/user/slice.ts",["52","53"],[],"import { Action, Dispatch } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { RootState } from \"./../reducer\";\n\nimport { UserAlias } from \"./../../typesClient\";\n\ninterface ActionType {\n    type: string;\n    payload: Partial<UserAlias>;\n}\n\nconst initUser: UserAlias = {\n    user_id: 0,\n    alias: \"\",\n    image_url: \"\",\n};\n\n// typeof ProfileInfoWBio\nexport default function userReducer(\n    user: UserAlias = initUser,\n    action: ActionType\n) {\n    switch (action.type) {\n        case \"/userInfo/receive\":\n            console.log(\"action.payload\", action.payload);\n            user = { ...user, ...action.payload };\n\n            action.payload\n                ? (user = action.payload as UserAlias)\n                : (user = initUser);\n            break;\n        case \"/userInfo/updatePhotoUrl\":\n            // user = { ...user, image_url: action.payload.image_url };\n            break;\n        case \"/userInfo/updateBio\":\n            // user = { ...user, bio: action.payload.bio };\n            break;\n        default:\n            break;\n    }\n    return user;\n}\n\n/* -------------------------------------------------------------------------------------------\n                                    ACTION\n----------------------------------------------------------------------------------------------*/\n\nexport function userUpdatePhotoUrl(image_url: string) {\n    return {\n        type: `/userInfo/updatePhotoUrl`,\n        payload: { image_url },\n    };\n}\n\nexport function userUpdateBio(bio: Array<string>) {\n    return {\n        type: `/userInfo/updateBio`,\n        payload: { bio },\n    };\n}\n\n/* -------------------------------------------------------------------------------------------\n                                    ASYNC: ThunkAction\n----------------------------------------------------------------------------------------------*/\n\ntype UserThunk = ThunkAction<void, RootState, null, Action<ActionType>>;\n\n/* \n    type ThunkAction<R, S, E, A extends Action>\n\n  S = is the type of root state\n    = is the return type of the getState() method.\n  \n  E = is the type of the extra arguments passed to the ThunkAction\n  \n  A = is the action type defined in your application.\n    = it should be able to extend from Action.\n      (this means that it should be an object \n      that must have a `type` field.) Action type is defined in the redux typings.\n  */\n\n// export const asyncReceiveUser =\n//     (abort: boolean): UserThunk =>\n//     async (dispatch: Dispatch) => {\n//         console.log(\"I am in asyncReceiveUser\");\n//         try {\n//             // handle fetch success\n//             // REVIEW: Need to send the bio as array!\n//             const respBody = await fetch(\"/getUserInfo.json\");\n//             const data = await respBody.json();\n//             console.log(\"Data from /getUserInfo.json\", data);\n\n//             if (!abort) {\n//                 return dispatch({\n//                     type: `/userInfo/receive`,\n//                     payload: { ...data.payload },\n//                 });\n//             } else {\n//                 console.log(\"ignore don't run a a state update\");\n//             }\n//         } catch (err) {\n//             // handle fetch failure\n//             console.log(\"Error\", err);\n//         }\n//     };\n","/home/mgcz/game-board/client/src/welcome.tsx",[],[],"/home/mgcz/game-board/client/src/login.tsx",["54"],[],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Registration.css\";\nimport validator from \"validator\";\n\ninterface LogInInputs {\n    email: string;\n    password: string;\n}\n\nconst initReg: LogInInputs = {\n    email: \"\",\n    password: \"\",\n};\n\nconst optionValidatorEmpty = { ignore_whitespace: false };\n\nexport default function LogIn() {\n    const [inputsValues, setInputsValues] = useState<LogInInputs>(initReg);\n    const [error, setError] = useState<boolean>(false);\n\n    function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        setInputsValues({\n            ...inputsValues,\n            [event.target.name]: event.target.value.trim(),\n        });\n    }\n\n    async function handleSubmit() {\n        console.log(\"Handle the submit, inputsValues:\", inputsValues);\n\n        // Lets Valid the input before sending them to the server.\n        if (\n            !validator.isEmail(inputsValues.email) ||\n            validator.isEmpty(inputsValues.password, optionValidatorEmpty)\n        ) {\n            console.log(\"Error\");\n            setError(true);\n        } else {\n            console.log(\"All inputs are valid\");\n\n            try {\n                const resp = await fetch(\"/api/login\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify(inputsValues),\n                });\n\n                const data = await resp.json();\n\n                if (data.status === \"Success\") {\n                    console.log(\"Everything is success!\");\n                    // location.replace(\"/\");\n                } else {\n                    setError(true);\n                }\n            } catch {\n                setError(true);\n            }\n        }\n    }\n\n    return (\n        <>\n            <div>registration</div>\n            <div className=\"form\">\n                <h1>Join our community</h1>\n\n                <p>\n                    Registration ||\n                    {/* <Link to=\"/login\"> Log in </Link> */}\n                </p>\n                <div className=\"error\">\n                    {error && <p>oops, something went wrong</p>}\n                </div>\n\n                <input\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"Email@email.com\"\n                    onChange={handleChange}\n                    required\n                ></input>\n                <input\n                    type=\"password\"\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    onChange={handleChange}\n                    required\n                ></input>\n                <button onClick={handleSubmit}>Accept</button>\n            </div>\n        </>\n    );\n}\n",{"ruleId":"55","severity":1,"message":"56","line":1,"column":17,"nodeType":"57","messageId":"58","endLine":1,"endColumn":26},{"ruleId":"55","severity":1,"message":"59","line":3,"column":10,"nodeType":"57","messageId":"58","endLine":3,"endColumn":23},{"ruleId":"55","severity":1,"message":"60","line":3,"column":31,"nodeType":"57","messageId":"58","endLine":3,"endColumn":36},{"ruleId":"61","severity":2,"message":"62","line":14,"column":21,"nodeType":"57","messageId":"63","endLine":14,"endColumn":29,"suppressions":"64"},{"ruleId":"55","severity":1,"message":"65","line":2,"column":10,"nodeType":"57","messageId":"58","endLine":2,"endColumn":14},{"ruleId":"55","severity":1,"message":"66","line":1,"column":18,"nodeType":"57","messageId":"58","endLine":1,"endColumn":26},{"ruleId":"55","severity":1,"message":"67","line":66,"column":6,"nodeType":"57","messageId":"58","endLine":66,"endColumn":15},{"ruleId":"55","severity":1,"message":"65","line":2,"column":10,"nodeType":"57","messageId":"58","endLine":2,"endColumn":14},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'BrowserRouter' is defined but never used.","'Route' is defined but never used.","no-restricted-globals","Unexpected use of 'location'.","defaultMessage",["68"],"'Link' is defined but never used.","'Dispatch' is defined but never used.","'UserThunk' is defined but never used.",{"kind":"69","justification":"70"},"directive",""]